{"version":3,"file":"webgpu-memory.min.js","sources":["../../../src/capabilities-info.ts","../../../src/webgpu-memory.ts"],"sourcesContent":["/* eslint-disable no-sparse-arrays */\n\n/*\nThis file was copied and modified from the WebGPU Conformance Test Suite\nhttps://github.com/gpuweb/cts/blob/main/src/webgpu/capability_info.ts\n\nNote: Changes include adding bytesPerBlock to depth24plus, depth24plus-stencil8\nand depth32-stencil8\n\nCopyright 2019 WebGPU CTS Contributors\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\n   3. Neither the name of the copyright holder nor the names of its\n      contributors may be used to endorse or promote products derived from this\n      software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\nfunction keysOf<T extends string>(obj: { [k in T]?: unknown }): readonly T[] {\n  return Object.keys(obj) as unknown[] as T[];\n}\n\n/**\n * Defaults applied to all texture format tables automatically. Used only inside\n * `formatTableWithDefaults`. This ensures keys are never missing, always explicitly `undefined`.\n *\n * All top-level keys must be defined here, or they won't be exposed at all.\n * Documentation is also written here; this makes it propagate through to the end types.\n */\nconst kFormatUniversalDefaults = {\n  /** Texel block width. */\n  blockWidth: undefined,\n  /** Texel block height. */\n  blockHeight: undefined,\n  color: undefined,\n  depth: undefined,\n  stencil: undefined,\n  /**\n   * Info when this format can be used as a color render target. The format may require a feature\n   * to actually be used as a render target. Eg: rg11b10ufloat which requires rg11b10ufloat-renderable\n   * Call {@link isTextureFormatPossiblyUsableAsColorRenderAttachment} before having a device\n   * Call {@link isTextureFormatColorRenderable}(device, format) to find out for a particular device.\n   * Use {@link kPossibleColorRenderableTextureFormats} for params.\n   */\n  colorRender: undefined,\n  /**\n   * Whether the format can possibly be used as a multisample texture. The format may require a\n   * feature to actually multisampled. Eg: rg11b10ufloat which requires rg11b10ufloat-renderable\n   * Call {@link isTextureFormatPossiblyMultisampled} before having a device\n   * Call {@link isTextureFormatMultisampled}(device, format) to find out for a particular device.\n   * Use {@link kPossibleMultisampledTextureFormats} for params.\n   */\n  multisample: undefined,\n  /** Optional feature required to use this format, or `undefined` if none. */\n  feature: undefined,\n  /** The base format for srgb formats. Specified on both srgb and equivalent non-srgb formats. */\n  baseFormat: undefined,\n\n  /** @deprecated Use `.color.bytes`, `.depth.bytes`, or `.stencil.bytes`. */\n  bytesPerBlock: undefined,\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in TextureFormatInfo_TypeCheck.\n} ;\n/**\n * Takes `table` and applies `defaults` to every row, i.e. for each row,\n * `{ ... kUniversalDefaults, ...defaults, ...row }`.\n * This only operates at the first level; it doesn't support defaults in nested objects.\n */\nfunction formatTableWithDefaults<Defaults extends {}, Table extends { readonly [K: string]: {} }>({\n  defaults,\n  table,\n}: {\n  defaults: Defaults;\n  table: Table;\n}): {\n  readonly [F in keyof Table]: {\n    readonly [K in keyof typeof kFormatUniversalDefaults]: K extends keyof Table[F]\n      ? Table[F][K]\n      : K extends keyof Defaults\n      ? Defaults[K]\n      : (typeof kFormatUniversalDefaults)[K];\n  };\n} {\n  return Object.fromEntries(\n    Object.entries(table).map(([k, row]) => [\n      k,\n      { ...kFormatUniversalDefaults, ...defaults, ...row },\n    ])\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ) as any;\n}\n\n/** \"plain color formats\", plus rgb9e5ufloat. */\nconst kRegularTextureFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1 },\n  table: {\n    // plain, 8 bits per component\n\n    r8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'rgba8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    bgra8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bgra8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 16 bits per component\n\n    r16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 4, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 2 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 32 bits per component\n\n    r32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, mixed component width, 32 bits per texel\n\n    rgb10a2uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgb10a2unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg11b10ufloat: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 4 },\n      multisample: true,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // packed\n\n    rgb9e5ufloat: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} );\n\n// MAINTENANCE_TODO: Distinguishing \"sized\" and \"unsized\" depth stencil formats doesn't make sense\n// because one aspect can be sized and one can be unsized. This should be cleaned up, but is kept\n// this way during a migration phase.\nconst kSizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true },\n  table: {\n    stencil8: {\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      bytesPerBlock: 1,\n    },\n    depth16unorm: {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      bytesPerBlock: 2,\n    },\n    depth32float: {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      bytesPerBlock: 4,\n    },\n  },\n} );\nconst kUnsizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true },\n  table: {\n    depth24plus: {\n      depth: {\n        type: 'depth',\n        copySrc: false,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: undefined,\n      },\n      bytesPerBlock: 4,\n    },\n    'depth24plus-stencil8': {\n      depth: {\n        type: 'depth',\n        copySrc: false,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: undefined,\n      },\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      bytesPerBlock: 4,\n    },\n    'depth32float-stencil8': {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      feature: 'depth32float-stencil8',\n      bytesPerBlock: 5,\n    },\n  },\n} );\n\nconst kBCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-bc',\n  },\n  table: {\n    'bc1-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc1-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc2-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc2-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc3-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc3-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc4-r-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc4-r-snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc5-rg-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc5-rg-snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc6h-rgb-ufloat': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc6h-rgb-float': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc7-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc7-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} );\n\nconst kETC2TextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-etc2',\n  },\n  table: {\n    'etc2-rgb8unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgb8a1unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8a1unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgba8unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgba8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-r11unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-r11snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-rg11unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-rg11snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} );\n\nconst kASTCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    multisample: false,\n    feature: 'texture-compression-astc',\n  },\n  table: {\n    'astc-4x4-unorm': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-4x4-unorm-srgb': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x4-unorm': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x4-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x5-unorm': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x5-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x5-unorm': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x5-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x6-unorm': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x6-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x5-unorm': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x5-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x6-unorm': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x6-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x8-unorm': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x8-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x5-unorm': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x5-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x6-unorm': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x6-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x8-unorm': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x8-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x10-unorm': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x10-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x10-unorm': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x10-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x12-unorm': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x12-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} );\n\n// Definitions for use locally.\n\n// MAINTENANCE_TODO: Consider generating the exports below programmatically by filtering the big list, instead\n// of using these local constants? Requires some type magic though.\n/* prettier-ignore */ const   kCompressedTextureFormatInfo = { ...kBCTextureFormatInfo, ...kETC2TextureFormatInfo, ...kASTCTextureFormatInfo } ;\n/* prettier-ignore */ const        kColorTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kCompressedTextureFormatInfo } ;\n/* prettier-ignore */ const    kEncodableTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo } ;\n/* prettier-ignore */ const        kSizedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kCompressedTextureFormatInfo } ;\n/* prettier-ignore */ const        kDepthStencilFormatInfo = { ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } ;\n/* prettier-ignore */ const kUncompressedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } ;\n/* prettier-ignore */ const          kAllTextureFormatInfo = { ...kUncompressedTextureFormatInfo, ...kCompressedTextureFormatInfo } ;\n\n/* prettier-ignore */ export const        kRegularTextureFormats = keysOf(     kRegularTextureFormatInfo);\n/* prettier-ignore */ export const     kSizedDepthStencilFormats = keysOf(  kSizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const   kUnsizedDepthStencilFormats = keysOf(kUnsizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const     kCompressedTextureFormats = keysOf(  kCompressedTextureFormatInfo);\n/* prettier-ignore */ export const   kBCCompressedTextureFormats = keysOf(          kBCTextureFormatInfo);\n/* prettier-ignore */ export const kASTCCompressedTextureFormats = keysOf(        kASTCTextureFormatInfo);\n\n/* prettier-ignore */ export const        kColorTextureFormats = keysOf(       kColorTextureFormatInfo);\n/* prettier-ignore */ export const    kEncodableTextureFormats = keysOf(   kEncodableTextureFormatInfo);\n/* prettier-ignore */ export const        kSizedTextureFormats = keysOf(       kSizedTextureFormatInfo);\n/* prettier-ignore */ export const        kDepthStencilFormats = keysOf(       kDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUncompressedTextureFormats = keysOf(kUncompressedTextureFormatInfo);\n/* prettier-ignore */ export const          kAllTextureFormats = keysOf(         kAllTextureFormatInfo);\n\n\n/**\n * DO NOT EXPORT THIS - functions that need info from this table should use the appropriate\n * method for their needs.\n *\n * For a list of textures formats for test parameters there are:\n *\n * Lists of formats that might require features to be enabled\n * * kPossibleColorRenderableTextureFormats\n * * kPossibleStorageTextureFormats\n * * kPossibleReadWriteStorageTextureFormats\n * * kPossibleMultisampledTextureFormats\n *\n * Lists of formats that end in -srgb\n * * kDifferentBaseFormatTextureFormats  (includes compressed textures)\n * * kDifferentBaseFormatRegularTextureFormats (does not include compressed textures)\n *\n * Formats that require a feature to use at all (mostly compressed formats)\n * * kOptionalTextureFormats\n *\n * Misc\n * * kRegularTextureFormats\n * * kSizedDepthStencilFormats\n * * kUnsizedDepthStencilFormats\n * * kCompressedTextureFormats\n * * kUncompressedTextureFormats\n * * kColorTextureFormats - color formats including compressed and sint/uint\n * * kEncodableTextureFormats - formats that TexelView supports.\n * * kSizedTextureFormats - formats that have a known size (so not depth24plus ...)\n * * kDepthStencilFormats - depth, stencil, depth-stencil\n * * kDepthTextureFormats - depth and depth-stencil\n * * kStencilTextureFormats - stencil and depth-stencil\n * * kAllTextureFormats\n *\n * If one of the list above does not work, add a new one or to filter in beforeAllSubcases you generally want to use\n * You will not know if you can actually use a texture for the given use case until the test runs and has a device.\n *\n * * isTextureFormatPossiblyUsableAsRenderAttachment\n * * isTextureFormatPossiblyUsableAsColorRenderAttachment\n * * isTextureFormatPossiblyMultisampled\n * * isTextureFormatPossiblyStorageReadable\n * * isTextureFormatPossiblyStorageReadWritable\n * * isTextureFormatPossiblyFilterableAsTextureF32\n *\n * These are also usable before or during a test\n *\n * * isColorTextureFormat\n * * isDepthTextureFormat\n * * isStencilTextureFormat\n * * isDepthOrStencilTextureFormat\n * * isEncodableTextureFormat\n * * isRegularTextureFormat\n * * isCompressedFloatTextureFormat\n * * isSintOrUintFormat\n *\n * To skip a test use the `skipIfXXX` tests in `GPUTest` if possible. Otherwise these functions\n * require a device to give a correct answer.\n *\n * * isTextureFormatUsableAsRenderAttachment\n * * isTextureFormatColorRenderable\n * * isTextureFormatResolvable\n * * isTextureFormatBlendable\n * * isTextureFormatMultisampled\n * * isTextureFormatUsableAsStorageFormat\n * * isTextureFormatUsableAsReadWriteStorageTexture\n * * isTextureFormatUsableAsStorageFormatInCreateShaderModule\n *\n * Per-GPUTextureFormat info.\n */\nexport const kTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n  ...kBCTextureFormatInfo,\n  ...kETC2TextureFormatInfo,\n  ...kASTCTextureFormatInfo,\n};\n\n\n// The formats of GPUTextureFormat for canvas context.\nexport const kCanvasTextureFormats = ['bgra8unorm', 'rgba8unorm', 'rgba16float'];\n","import { kTextureFormatInfo } from './capabilities-info.js';\n\ntype ComputeMemSizeFn =  (...args: any[]) => number;;\n\nconst webgpuMemoryIdSymbol = Symbol('webgpu-memory-object-id');\nconst deviceIdToDeviceWeakRef = new Map<number, WeakRef<GPUDevice>>();\n\ndeclare global {\n  interface GPUObjectBase {\n     [webgpuMemoryIdSymbol]: number;\n  }\n  interface GPUCanvasContext {\n     [webgpuMemoryIdSymbol]: number;\n  }\n}\n\ntype Category = \n  | 'buffer'\n  | 'bindGroup'\n  | 'bindGroupLayout'\n  | 'canvas'\n  | 'computePipeline'\n  | 'device'\n  | 'pipelineLayout'\n  | 'querySet'\n  | 'renderPipeline'\n  | 'sampler'\n  | 'shaderModule'\n  | 'texture'\n  ;\n\ntype WebGPUObject = GPUObjectBase | GPUCanvasContext;\ntype WebGPUObjectInfo = {\n  ref: WeakRef<WebGPUObject>,\n  id: number,\n  deviceId: number,\n  category: Category,\n  size: number | ComputeMemSizeFn,\n};\n\ntype DeviceInfo = WebGPUObjectInfo & {\n  maxTotal: number,\n  runningTotal: number,\n};\n\ntype CanvasInfo = WebGPUObjectInfo & {\n  oldSize: number,\n}\n\nlet nextId = 1;\nconst allWebGPUObjectsById = new Map<number, WebGPUObjectInfo | DeviceInfo | CanvasInfo>();\nlet globalRunningTotal = 0;\nlet globalMaxTotal = 0;\n\n/**\n * Start tracking a resource by device\n */\nfunction addDeviceObject(\n  device: GPUDevice,\n  webgpuObject: WebGPUObject,\n  category: Category,\n  size: number | ComputeMemSizeFn) {\n  let id = webgpuObject[webgpuMemoryIdSymbol];\n  if (!id) {\n    id = nextId++;\n    webgpuObject[webgpuMemoryIdSymbol] = id;\n  }\n  const deviceId = device[webgpuMemoryIdSymbol];\n  const info: WebGPUObjectInfo = {\n    ref: new WeakRef(webgpuObject),\n    id,\n    deviceId,\n    category,\n    size,\n  };\n  allWebGPUObjectsById.set(id, info);\n  if (typeof size === 'function') {\n    size = size(webgpuObject);\n    (info as CanvasInfo).oldSize = size;\n  }\n  if (!isNaN(size)) {\n    const deviceInfo = allWebGPUObjectsById.get(deviceId) as DeviceInfo;\n    updateDeviceInfoRunningTotal(deviceInfo, size);\n  }\n}\n\nfunction updateDeviceInfoRunningTotal(deviceInfo: DeviceInfo, size: number) {\n  deviceInfo.runningTotal = (deviceInfo.runningTotal ?? 0) + size;\n  deviceInfo.maxTotal = Math.max(deviceInfo.maxTotal ?? 0, deviceInfo.runningTotal);\n  globalRunningTotal = globalRunningTotal + size;\n  globalMaxTotal = Math.max(globalMaxTotal, globalRunningTotal);\n}\n\n/**\n * Start tracking a resource by device\n */\nfunction addDeviceMem(\n  device: GPUDevice,\n  webgpuObject: WebGPUObject,\n  category: Category,\n  size: number | ComputeMemSizeFn) {\n  addDeviceObject(device, webgpuObject, category, size);\n}\n\n/**\n */\nfunction deviceExists(deviceId: number) {\n  const ref = deviceIdToDeviceWeakRef.get(deviceId);\n  return ref && !!ref.deref();\n}\n\n/**\n * Free an object's memory\n */\nfunction freeObjectById(id: number, webgpuObject?: WebGPUObject) {\n  const obj = allWebGPUObjectsById.get(id);\n  const sizer = obj?.size;\n  const size = (webgpuObject && typeof sizer === 'function')\n    ? sizer(webgpuObject)\n    : sizer as number;\n  if (!isNaN(size as any)) {\n    const deviceInfo = allWebGPUObjectsById.get(obj!.deviceId) as DeviceInfo;\n    if (deviceInfo) {\n      updateDeviceInfoRunningTotal(deviceInfo, -size);\n    }\n  }\n  allWebGPUObjectsById.delete(id);\n}\n\n/**\n * Free the memory used by object.\n */\nfunction freeObject(webgpuObject: WebGPUObject) {\n  const id = webgpuObject[webgpuMemoryIdSymbol];\n  freeObjectById(id, webgpuObject);\n}\n\ntype MemoryInfo = {\n  total: number,\n  buffer: number,\n  texture: number,\n  querySet: number,\n  canvas: number,\n  maxTotal: number,\n};\n\ntype WebGPUMemoryInfo = {\n  memory: MemoryInfo,\n  resources: { [key: string]: number } \n};\n\n/**\n * Gets WebGPU memory usage. If no device is passed in returns info for all devices.\n */\nexport function getWebGPUMemoryUsage(device?: GPUDevice) {\n  const memory: MemoryInfo = {\n    total: 0,\n    buffer: 0,\n    texture: 0,\n    querySet: 0,\n    canvas: 0,\n    maxTotal: 0,\n  };\n  const resources: { [key: string]: number } = {\n    buffer: 0,\n    texture: 0,\n    querySet: 0,\n  };\n  const info = { memory, resources };\n\n  const requestedDeviceId = device && device[webgpuMemoryIdSymbol];\n\n  const idsToDelete: number[] = [];\n  for (const [id, info] of allWebGPUObjectsById.entries()) {\n    const {ref, deviceId, category, size} = info;\n    const webgpuObject = ref.deref();\n    if (!webgpuObject || !deviceExists(deviceId)) {\n      idsToDelete.push(id);\n    } else {\n      if (!requestedDeviceId || deviceId === requestedDeviceId) {\n        resources[category] = (resources[category] || 0) + 1;\n        if (size) {\n          const numBytes = typeof size === 'function' ? size(webgpuObject) : size;\n          memory.total += numBytes;\n          memory[category as unknown as keyof typeof memory] += numBytes;\n        }\n        if (category === 'device') {\n          memory.maxTotal += (info as DeviceInfo).maxTotal;\n        }\n      }\n    }\n  }\n\n  if (!device) {\n    memory.maxTotal = globalMaxTotal;\n  }\n\n  idsToDelete.forEach(id => freeObjectById(id));\n\n  return info;\n}\n\nexport function resetMaxTotal(device?: GPUDevice) {\n  const devices: GPUDevice[] = device ? [device] : [];\n  let newGlobalMaxTotal = 0;\n  if (!device) {\n    for (const [id, {ref, category}] of allWebGPUObjectsById.entries()) {\n      if (category === 'device') {\n        const webgpuObject = ref.deref();\n        if (webgpuObject) {\n          devices.push(webgpuObject as GPUDevice);\n        }\n      }\n    }\n  }\n\n  for (const device of devices) {\n    const info = getWebGPUMemoryUsage(device);\n    const deviceId = device[webgpuMemoryIdSymbol];\n    const deviceInfo = allWebGPUObjectsById.get(deviceId) as DeviceInfo;\n    if (deviceInfo) {\n      const { total } = info.memory;\n      deviceInfo.maxTotal = total;\n      newGlobalMaxTotal += total;\n    }\n  }\n\n  if (!device) {\n    globalRunningTotal = newGlobalMaxTotal;\n    globalMaxTotal = newGlobalMaxTotal;\n  }\n}\n\n\nfunction computeTextureMemorySize(texture: {\n  format: GPUTextureFormat,\n  dimension: GPUTextureDimension,\n  width: number,\n  height: number,\n  depthOrArrayLayers: number,\n  mipLevelCount: number,\n  sampleCount: number,\n}) {\n  const {\n    blockWidth,\n    blockHeight,\n    bytesPerBlock,\n  } = kTextureFormatInfo[texture.format];\n\n  let size = 0;\n  let width = texture.width;\n  let height = texture.height;\n  let depth = texture.depthOrArrayLayers;\n\n  for (let level = 0; level < texture.mipLevelCount; ++level) {\n    const blocksAcross = Math.ceil(width * texture.sampleCount / blockWidth);\n    const blocksDown = Math.ceil(height * texture.sampleCount / blockHeight);\n    const numBlocks = blocksAcross * blocksDown * depth;\n    const bytesUsed = numBlocks * bytesPerBlock;\n    size += bytesUsed;\n    width = Math.max(1, width / 2 | 0);\n    height = Math.max(1, height / 2 | 0);\n    depth = texture.dimension === '3d' ? Math.max(1, depth / 2 | 0) : depth;\n  }\n\n  return size;\n}\n\nfunction addBuffer(device: GPUDevice, buffer: GPUBuffer) {\n  const bytesUsed = buffer.size;\n  addDeviceMem(device, buffer, 'buffer', bytesUsed);\n}\n\nfunction removeBuffer(buffer: GPUBuffer) {\n  freeObject(buffer);\n}\n\nfunction addTexture(device: GPUDevice, texture: GPUTexture) {\n  const bytesUsed = computeTextureMemorySize(texture);\n  addDeviceMem(device, texture, 'texture', bytesUsed);\n}\n\nfunction removeTexture(texture: GPUTexture) {\n  freeObject(texture);\n}\n\nfunction addQuerySet(device: GPUDevice, querySet: GPUQuerySet) {\n  const bytesUsed = querySet.count * 8;\n  addDeviceMem(device, querySet, 'querySet', bytesUsed);\n}\n\nfunction removeQuerySet(querySet: GPUQuerySet) {\n  freeObject(querySet);\n}\n\nfunction addDevice(adapter: GPUAdapter, device: GPUDevice) {\n  addDeviceMem(device, device, 'device', 0);\n  const id = device[webgpuMemoryIdSymbol];\n  deviceIdToDeviceWeakRef.set(id, new WeakRef(device));\n}\n\nfunction removeDevice(device: GPUDevice) {\n  const id = device[webgpuMemoryIdSymbol];\n  deviceIdToDeviceWeakRef.delete(id);\n  freeObject(device);\n}\n\n// assuming there are, in general, 2 textures per canvas.\n// The one being displayed and the one being rendered to\nconst kTexturesPerCanvas = 2;\n\nfunction computeCanvasBytesUsed(context: GPUCanvasContext, format: GPUTextureFormat) {\n  const {width, height} = context.canvas;\n  return computeTextureMemorySize({\n    format,\n    width,\n    height,\n    depthOrArrayLayers: 1,\n    sampleCount: 1,\n    mipLevelCount: 1,\n    dimension: '2d',\n  }) * kTexturesPerCanvas;\n}\n\nfunction addContext(context: GPUCanvasContext, dummy: any, config: GPUCanvasConfiguration) {\n  freeObject(context);\n  const format = config.format;\n  addDeviceMem(config.device, context, 'canvas', (context) => computeCanvasBytesUsed(context, format))\n}\n\nfunction removeContext(context: GPUCanvasContext) {\n  freeObject(context);\n}\n\nfunction resizeContext(context: GPUCanvasContext) {\n  const id = context[webgpuMemoryIdSymbol];\n  const info = allWebGPUObjectsById.get(id) as CanvasInfo;\n  const deviceInfo = allWebGPUObjectsById.get(info.deviceId) as DeviceInfo;\n  updateDeviceInfoRunningTotal(deviceInfo, -info.oldSize);\n  const size = (info.size as ComputeMemSizeFn)(context);\n  info.oldSize = size;\n  updateDeviceInfoRunningTotal(deviceInfo, size);\n}\n\n/**\n * Adds a wrapper function to a class method that gets called after the actual function\n */\n//function wrapFunction(object, name: string, fn) {\n//  const origFn = object.prototype[name];\n//  object.prototype[name] = function(...args) {\n//    const result = origFn.call(this, ...args);\n//    if (result !== undefined && typeof result.then === 'function') {\n//      result.then(realResult => fn(this, realResult, ...args));\n//    } else {\n//      fn(this, result, ...args);\n//    }\n//    return result;\n//  };\n//}\n\nfunction wrapFunction<K extends PropertyKey, T extends Record<K,(...args: Parameters<T[K]>) => any>>(\n    API: { prototype: T },\n    fnName: K,\n    fn: (t: T, obj: ReturnType<T[K]>, ...args: Parameters<T[K]>) => void) {\n  const origFn = API.prototype[fnName];\n  API.prototype[fnName] = function (this: T, ...args: Parameters<T[K]>) {\n    const result = origFn.call(this, ...args);\n    fn(this, result, ...args);\n    return result;\n  } as any;\n}\n\nfunction wrapAsyncFunction<K extends PropertyKey, T extends Record<K,(...args: Parameters<T[K]>) => any>>(\n    API: { prototype: T },\n    fnName: K,\n    fn: (t: T, obj: Awaited<ReturnType<T[K]>>, ...args: Parameters<T[K]>) => void) {\n  const origFn = API.prototype[fnName];\n  API.prototype[fnName] = async function (this: T, ...args: Parameters<T[K]>) {\n    const result = await origFn.call(this, ...args);\n    fn(this, result, ...args);\n    return result;\n  } as any;\n}\n\ndeclare global {\n  interface GPUDevice {\n    createSampler(descriptor?: any): GPUSampler;\n    createBindGroup(descriptor: any): GPUBindGroup;\n    createBindGroupLayout(descriptor: any): GPUBindGroupLayout;\n    createPipelineLayout(descriptor: any): GPUPipelineLayout;\n    createShaderModule(descriptor: any): GPUShaderModule;\n    createComputePipeline(descriptor: any): GPUComputePipeline;\n    createRenderPipeline(descriptor: any): GPURenderPipeline;\n    createComputePipelineAsync(descriptor: any): Promise<GPUComputePipeline>;\n    createRenderPipelineAsync(descriptor: any): Promise<GPURenderPipeline>;\n    prototype: GPUDevice; // Prototype should be the instance type for 'this' context    \n  }\n}\n\nfunction wrapCreationDestroy(factoryClass: any, objectClass: any, fnName: string, category: Category) {\n  // @ts-ignore\n  wrapFunction(factoryClass, fnName, function (device: GPUDevice, object: WebGPUObject) {\n    addDeviceObject(device, object, category, 0);\n  });\n  if (objectClass.prototype.destroy) {\n    wrapFunction(objectClass, 'destroy', function(object: WebGPUObject) {\n      freeObject(object);\n    });\n  }\n}\n\nif (typeof GPUAdapter !== 'undefined') {\n  wrapAsyncFunction(GPUAdapter, 'requestDevice', addDevice);\n  wrapFunction(GPUDevice, 'destroy', removeDevice);\n\n  wrapFunction(GPUCanvasContext, 'configure', addContext);\n  wrapFunction(GPUCanvasContext, 'unconfigure', removeContext);\n  wrapFunction(GPUCanvasContext, 'getCurrentTexture', resizeContext)\n\n  wrapFunction(GPUDevice, 'createBuffer', addBuffer);\n  wrapFunction(GPUBuffer, 'destroy', removeBuffer);\n  wrapFunction(GPUDevice, 'createTexture', addTexture);\n  wrapFunction(GPUTexture, 'destroy', removeTexture);\n  wrapFunction(GPUDevice, 'createQuerySet', addQuerySet);\n  wrapFunction(GPUQuerySet, 'destroy', removeQuerySet);\n\n  wrapCreationDestroy(GPUDevice, GPUSampler, 'createSampler', 'sampler');\n  wrapCreationDestroy(GPUDevice, GPUBindGroup, 'createBindGroup', 'bindGroup');\n  wrapCreationDestroy(GPUDevice, GPUBindGroupLayout, 'createBindGroupLayout', 'bindGroupLayout');\n  wrapCreationDestroy(GPUDevice, GPUPipelineLayout, 'createPipelineLayout', 'pipelineLayout');\n  wrapCreationDestroy(GPUDevice, GPUShaderModule, 'createShaderModule', 'shaderModule');\n  wrapCreationDestroy(GPUDevice, GPUComputePipeline, 'createComputePipeline', 'computePipeline');\n  wrapCreationDestroy(GPUDevice, GPURenderPipeline, 'createRenderPipeline', 'renderPipeline');\n  wrapCreationDestroy(GPUDevice, GPUComputePipeline, 'createComputePipelineAsync', 'computePipeline');\n  wrapCreationDestroy(GPUDevice, GPURenderPipeline, 'createRenderPipelineAsync', 'renderPipeline');\n  //wrapCreationDestroy(GPUDevice, GPUCommandEncoder, 'createCommandEncoder', 'commandEncoder');\n  //wrapCreationDestroy(GPUDevice, GPURenderBundleEncoder, 'createRenderBundleEncoder', 'renderBundleEncoder');\n  // problem, no device for this\n  // GPURenderBundleEncoder, 'finish'\n}\n"],"names":["kFormatUniversalDefaults","blockWidth","undefined","blockHeight","color","depth","stencil","colorRender","multisample","feature","baseFormat","bytesPerBlock","formatTableWithDefaults","defaults","table","Object","fromEntries","entries","map","k","row","kRegularTextureFormatInfo","r8unorm","type","copySrc","copyDst","storage","readWriteStorage","bytes","blend","resolve","byteCost","alignment","this","r8snorm","r8uint","r8sint","rg8unorm","rg8snorm","rg8uint","rg8sint","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","r16uint","r16sint","r16float","rg16uint","rg16sint","rg16float","rgba16uint","rgba16sint","rgba16float","r32uint","r32sint","r32float","rg32uint","rg32sint","rg32float","rgba32uint","rgba32sint","rgba32float","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rgb9e5ufloat","kSizedDepthStencilFormatInfo","stencil8","depth16unorm","depth32float","kUnsizedDepthStencilFormatInfo","depth24plus","kBCTextureFormatInfo","kETC2TextureFormatInfo","kASTCTextureFormatInfo","kTextureFormatInfo","webgpuMemoryIdSymbol","Symbol","deviceIdToDeviceWeakRef","Map","nextId","allWebGPUObjectsById","globalRunningTotal","globalMaxTotal","addDeviceObject","device","webgpuObject","category","size","id","deviceId","info","ref","WeakRef","set","oldSize","isNaN","updateDeviceInfoRunningTotal","get","deviceInfo","runningTotal","maxTotal","Math","max","addDeviceMem","deviceExists","deref","freeObjectById","obj","sizer","delete","freeObject","getWebGPUMemoryUsage","memory","total","buffer","texture","querySet","canvas","resources","requestedDeviceId","idsToDelete","numBytes","push","forEach","computeTextureMemorySize","format","width","height","depthOrArrayLayers","level","mipLevelCount","ceil","sampleCount","dimension","wrapFunction","API","fnName","fn","origFn","prototype","args","result","call","wrapCreationDestroy","factoryClass","objectClass","object","destroy","GPUAdapter","async","wrapAsyncFunction","adapter","GPUDevice","GPUCanvasContext","context","dummy","config","computeCanvasBytesUsed","GPUBuffer","GPUTexture","count","GPUQuerySet","GPUSampler","GPUBindGroup","GPUBindGroupLayout","GPUPipelineLayout","GPUShaderModule","GPUComputePipeline","GPURenderPipeline","devices","newGlobalMaxTotal"],"mappings":"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"}