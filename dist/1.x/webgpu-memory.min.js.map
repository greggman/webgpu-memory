{"version":3,"file":"webgpu-memory.min.js","sources":["../../src/capabilities-info.js","../../src/webgpu-memory.js"],"sourcesContent":["/* eslint-disable no-sparse-arrays */\n\n/*\nThis file was copied and modified from the WebGPU Conformance Test Suite\nhttps://github.com/gpuweb/cts/blob/main/src/webgpu/capability_info.ts\n\nCopyright 2019 WebGPU CTS Contributors\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\n   3. Neither the name of the copyright holder nor the names of its\n      contributors may be used to endorse or promote products derived from this\n      software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\nfunction makeTable(members, defaults, table) {\n  const result = {};\n  for (const [k, v] of Object.entries(table)) {\n    const item = {};\n    for (let i = 0; i < members.length; ++i) {\n      item[members[i]] = v[i] ?? defaults[i];\n    }\n    result[k] = item;\n  }\n  return result;\n}\n\nfunction keysOf(o) {\n  return [...Object.keys(o)];\n}\n\nconst kRegularTextureFormatInfo = /* prettier-ignore */ makeTable(\n                           ['renderable', 'multisample', 'resolve', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst',         'sampleType', 'bytesPerBlock', 'blockWidth', 'blockHeight', 'renderTargetPixelByteCost', 'renderTargetComponentAlignment',                  'feature',       'baseFormat'],\n                           [            ,              ,          ,    true,   false,     false,          ,      true,      true,                     ,                ,            1,             1,                   undefined,                        undefined,                           ,          undefined], {\n  // 8-bit formats\n  'r8unorm':               [        true,          true,      true,        ,        ,          ,     false,          ,          ,              'float',               1,             ,              ,                           1,                                1],\n  'r8snorm':               [       false,         false,     false,        ,        ,          ,     false,          ,          ,              'float',               1],\n  'r8uint':                [        true,          true,     false,        ,        ,          ,     false,          ,          ,               'uint',               1,             ,              ,                           1,                                1],\n  'r8sint':                [        true,          true,     false,        ,        ,          ,     false,          ,          ,               'sint',               1,             ,              ,                           1,                                1],\n  // 16-bit formats\n  'r16uint':               [        true,          true,     false,        ,        ,          ,     false,          ,          ,               'uint',               2,             ,              ,                           2,                                2],\n  'r16sint':               [        true,          true,     false,        ,        ,          ,     false,          ,          ,               'sint',               2,             ,              ,                           2,                                2],\n  'r16float':              [        true,          true,      true,        ,        ,          ,     false,          ,          ,              'float',               2,             ,              ,                           2,                                2],\n  'rg8unorm':              [        true,          true,      true,        ,        ,          ,     false,          ,          ,              'float',               2,             ,              ,                           2,                                1],\n  'rg8snorm':              [       false,         false,     false,        ,        ,          ,     false,          ,          ,              'float',               2],\n  'rg8uint':               [        true,          true,     false,        ,        ,          ,     false,          ,          ,               'uint',               2,             ,              ,                           2,                                1],\n  'rg8sint':               [        true,          true,     false,        ,        ,          ,     false,          ,          ,               'sint',               2,             ,              ,                           2,                                1],\n  // 32-bit formats\n  'r32uint':               [        true,         false,     false,        ,        ,          ,      true,          ,          ,               'uint',               4,             ,              ,                           4,                                4],\n  'r32sint':               [        true,         false,     false,        ,        ,          ,      true,          ,          ,               'sint',               4,             ,              ,                           4,                                4],\n  'r32float':              [        true,          true,     false,        ,        ,          ,      true,          ,          , 'unfilterable-float',               4,             ,              ,                           4,                                4],\n  'rg16uint':              [        true,          true,     false,        ,        ,          ,     false,          ,          ,               'uint',               4,             ,              ,                           4,                                2],\n  'rg16sint':              [        true,          true,     false,        ,        ,          ,     false,          ,          ,               'sint',               4,             ,              ,                           4,                                2],\n  'rg16float':             [        true,          true,      true,        ,        ,          ,     false,          ,          ,              'float',               4,             ,              ,                           4,                                2],\n  'rgba8unorm':            [        true,          true,      true,        ,        ,          ,      true,          ,          ,              'float',               4,             ,              ,                           8,                                1,                           ,       'rgba8unorm'],\n  'rgba8unorm-srgb':       [        true,          true,      true,        ,        ,          ,     false,          ,          ,              'float',               4,             ,              ,                           8,                                1,                           ,       'rgba8unorm'],\n  'rgba8snorm':            [       false,         false,     false,        ,        ,          ,      true,          ,          ,              'float',               4],\n  'rgba8uint':             [        true,          true,     false,        ,        ,          ,      true,          ,          ,               'uint',               4,             ,              ,                           4,                                1],\n  'rgba8sint':             [        true,          true,     false,        ,        ,          ,      true,          ,          ,               'sint',               4,             ,              ,                           4,                                1],\n  'bgra8unorm':            [        true,          true,      true,        ,        ,          ,     false,          ,          ,              'float',               4,             ,              ,                           8,                                1,                           ,       'bgra8unorm'],\n  'bgra8unorm-srgb':       [        true,          true,      true,        ,        ,          ,     false,          ,          ,              'float',               4,             ,              ,                           8,                                1,                           ,       'bgra8unorm'],\n  // Packed 32-bit formats\n  'rgb10a2unorm':          [        true,          true,      true,        ,        ,          ,     false,          ,          ,              'float',               4,             ,              ,                           8,                                4],\n  'rg11b10ufloat':         [       false,         false,     false,        ,        ,          ,     false,          ,          ,              'float',               4,             ,              ,                           8,                                4],\n  'rgb9e5ufloat':          [       false,         false,     false,        ,        ,          ,     false,          ,          ,              'float',               4],\n  // 64-bit formats\n  'rg32uint':              [        true,         false,     false,        ,        ,          ,      true,          ,          ,               'uint',               8,             ,              ,                           8,                                4],\n  'rg32sint':              [        true,         false,     false,        ,        ,          ,      true,          ,          ,               'sint',               8,             ,              ,                           8,                                4],\n  'rg32float':             [        true,         false,     false,        ,        ,          ,      true,          ,          , 'unfilterable-float',               8,             ,              ,                           8,                                4],\n  'rgba16uint':            [        true,          true,     false,        ,        ,          ,      true,          ,          ,               'uint',               8,             ,              ,                           8,                                2],\n  'rgba16sint':            [        true,          true,     false,        ,        ,          ,      true,          ,          ,               'sint',               8,             ,              ,                           8,                                2],\n  'rgba16float':           [        true,          true,      true,        ,        ,          ,      true,          ,          ,              'float',               8,             ,              ,                           8,                                2],\n  // 128-bit formats\n  'rgba32uint':            [        true,         false,     false,        ,        ,          ,      true,          ,          ,               'uint',              16,             ,              ,                          16,                                4],\n  'rgba32sint':            [        true,         false,     false,        ,        ,          ,      true,          ,          ,               'sint',              16,             ,              ,                          16,                                4],\n  'rgba32float':           [        true,         false,     false,        ,        ,          ,      true,          ,          , 'unfilterable-float',              16,             ,              ,                          16,                                4],\n});\n/* prettier-ignore */\nconst kTexFmtInfoHeader =  ['renderable', 'multisample', 'resolve', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst',         'sampleType', 'bytesPerBlock', 'blockWidth', 'blockHeight', 'renderTargetPixelByteCost', 'renderTargetComponentAlignment',                  'feature',       'baseFormat'];\nconst kSizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [        true,          true,     false,   false,        ,          ,     false,          ,          ,                     ,                ,            1,             1,                   undefined,                        undefined,                           ,          undefined], {\n  'depth32float':          [            ,              ,          ,        ,    true,     false,          ,      true,     false,              'depth',               4],\n  'depth16unorm':          [            ,              ,          ,        ,    true,     false,          ,      true,      true,              'depth',               2],\n  'stencil8':              [            ,              ,          ,        ,   false,      true,          ,      true,      true,               'uint',               1],\n});\n\n// Multi aspect sample type are now set to their first aspect\n// NOTE: We're making a best guess here. These sizes are undefined but it's better to guess something reasonable than zero\nconst kUnsizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [        true,          true,     false,   false,        ,          ,     false,     false,     false,                     ,               4,            1,             1,                            ,                                 ,                           ,          undefined], {\n  'depth24plus':           [            ,              ,          ,        ,    true,     false,          ,          ,          ,              'depth'],\n  'depth24plus-stencil8':  [            ,              ,          ,        ,    true,      true,          ,          ,          ,              'depth'],\n  // MAINTENANCE_TODO: These should really be sized formats; see below MAINTENANCE_TODO about multi-aspect formats.\n  'depth32float-stencil8': [            ,              ,          ,        ,    true,      true,          ,          ,          ,              'depth',               5,             ,              ,                            ,                                 ,    'depth32float-stencil8'],\n});\n\n// Separated compressed formats by type\nconst kBCTextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [       false,         false,     false,    true,   false,     false,     false,      true,      true,                     ,                ,            4,             4,                            ,                                 ,                           ,          undefined], {\n  // Block Compression (BC) formats\n  'bc1-rgba-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 ,   'texture-compression-bc',   'bc1-rgba-unorm'],\n  'bc1-rgba-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 ,   'texture-compression-bc',   'bc1-rgba-unorm'],\n  'bc2-rgba-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc',   'bc2-rgba-unorm'],\n  'bc2-rgba-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc',   'bc2-rgba-unorm'],\n  'bc3-rgba-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc',   'bc3-rgba-unorm'],\n  'bc3-rgba-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc',   'bc3-rgba-unorm'],\n  'bc4-r-unorm':           [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 ,   'texture-compression-bc'],\n  'bc4-r-snorm':           [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 ,   'texture-compression-bc'],\n  'bc5-rg-unorm':          [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc'],\n  'bc5-rg-snorm':          [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc'],\n  'bc6h-rgb-ufloat':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc'],\n  'bc6h-rgb-float':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc'],\n  'bc7-rgba-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc',   'bc7-rgba-unorm'],\n  'bc7-rgba-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 ,   'texture-compression-bc',   'bc7-rgba-unorm'],\n});\nconst kETC2TextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [       false,         false,     false,    true,   false,     false,     false,      true,      true,                     ,                ,            4,             4,                            ,                                 ,                           ,          undefined], {\n  // Ericsson Compression (ETC2) formats\n  'etc2-rgb8unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 , 'texture-compression-etc2',   'etc2-rgb8unorm'],\n  'etc2-rgb8unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 , 'texture-compression-etc2',   'etc2-rgb8unorm'],\n  'etc2-rgb8a1unorm':      [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 , 'texture-compression-etc2', 'etc2-rgb8a1unorm'],\n  'etc2-rgb8a1unorm-srgb': [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 , 'texture-compression-etc2', 'etc2-rgb8a1unorm'],\n  'etc2-rgba8unorm':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 , 'texture-compression-etc2',  'etc2-rgba8unorm'],\n  'etc2-rgba8unorm-srgb':  [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 , 'texture-compression-etc2',  'etc2-rgba8unorm'],\n  'eac-r11unorm':          [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 , 'texture-compression-etc2'],\n  'eac-r11snorm':          [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',               8,            4,             4,                            ,                                 , 'texture-compression-etc2'],\n  'eac-rg11unorm':         [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 , 'texture-compression-etc2'],\n  'eac-rg11snorm':         [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 , 'texture-compression-etc2'],\n});\nconst kASTCTextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [       false,         false,     false,    true,   false,     false,     false,      true,      true,                     ,                ,             ,              ,                            ,                                 ,                           ,          undefined], {\n  // Adaptable Scalable Compression (ASTC) formats\n  'astc-4x4-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 , 'texture-compression-astc',   'astc-4x4-unorm'],\n  'astc-4x4-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            4,             4,                            ,                                 , 'texture-compression-astc',   'astc-4x4-unorm'],\n  'astc-5x4-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            5,             4,                            ,                                 , 'texture-compression-astc',   'astc-5x4-unorm'],\n  'astc-5x4-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            5,             4,                            ,                                 , 'texture-compression-astc',   'astc-5x4-unorm'],\n  'astc-5x5-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            5,             5,                            ,                                 , 'texture-compression-astc',   'astc-5x5-unorm'],\n  'astc-5x5-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            5,             5,                            ,                                 , 'texture-compression-astc',   'astc-5x5-unorm'],\n  'astc-6x5-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            6,             5,                            ,                                 , 'texture-compression-astc',   'astc-6x5-unorm'],\n  'astc-6x5-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            6,             5,                            ,                                 , 'texture-compression-astc',   'astc-6x5-unorm'],\n  'astc-6x6-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            6,             6,                            ,                                 , 'texture-compression-astc',   'astc-6x6-unorm'],\n  'astc-6x6-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            6,             6,                            ,                                 , 'texture-compression-astc',   'astc-6x6-unorm'],\n  'astc-8x5-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            8,             5,                            ,                                 , 'texture-compression-astc',   'astc-8x5-unorm'],\n  'astc-8x5-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            8,             5,                            ,                                 , 'texture-compression-astc',   'astc-8x5-unorm'],\n  'astc-8x6-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            8,             6,                            ,                                 , 'texture-compression-astc',   'astc-8x6-unorm'],\n  'astc-8x6-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            8,             6,                            ,                                 , 'texture-compression-astc',   'astc-8x6-unorm'],\n  'astc-8x8-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            8,             8,                            ,                                 , 'texture-compression-astc',   'astc-8x8-unorm'],\n  'astc-8x8-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,            8,             8,                            ,                                 , 'texture-compression-astc',   'astc-8x8-unorm'],\n  'astc-10x5-unorm':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           10,             5,                            ,                                 , 'texture-compression-astc',  'astc-10x5-unorm'],\n  'astc-10x5-unorm-srgb':  [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           10,             5,                            ,                                 , 'texture-compression-astc',  'astc-10x5-unorm'],\n  'astc-10x6-unorm':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           10,             6,                            ,                                 , 'texture-compression-astc',  'astc-10x6-unorm'],\n  'astc-10x6-unorm-srgb':  [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           10,             6,                            ,                                 , 'texture-compression-astc',  'astc-10x6-unorm'],\n  'astc-10x8-unorm':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           10,             8,                            ,                                 , 'texture-compression-astc',  'astc-10x8-unorm'],\n  'astc-10x8-unorm-srgb':  [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           10,             8,                            ,                                 , 'texture-compression-astc',  'astc-10x8-unorm'],\n  'astc-10x10-unorm':      [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           10,            10,                            ,                                 , 'texture-compression-astc', 'astc-10x10-unorm'],\n  'astc-10x10-unorm-srgb': [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           10,            10,                            ,                                 , 'texture-compression-astc', 'astc-10x10-unorm'],\n  'astc-12x10-unorm':      [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           12,            10,                            ,                                 , 'texture-compression-astc', 'astc-12x10-unorm'],\n  'astc-12x10-unorm-srgb': [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           12,            10,                            ,                                 , 'texture-compression-astc', 'astc-12x10-unorm'],\n  'astc-12x12-unorm':      [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           12,            12,                            ,                                 , 'texture-compression-astc', 'astc-12x12-unorm'],\n  'astc-12x12-unorm-srgb': [            ,              ,          ,        ,        ,          ,          ,          ,          ,              'float',              16,           12,            12,                            ,                                 , 'texture-compression-astc', 'astc-12x12-unorm'],\n});\n\n// Definitions for use locally. To access the table entries, use `kTextureFormatInfo`.\n\n// MAINTENANCE_TODO: Consider generating the exports below programmatically by filtering the big list, instead\n// of using these local constants? Requires some type magic though.\n/* prettier-ignore */ const   kCompressedTextureFormatInfo = { ...kBCTextureFormatInfo, ...kETC2TextureFormatInfo, ...kASTCTextureFormatInfo };\n/* prettier-ignore */ const        kColorTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kCompressedTextureFormatInfo };\n/* prettier-ignore */ const    kEncodableTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo };\n/* prettier-ignore */ const        kSizedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kCompressedTextureFormatInfo };\n/* prettier-ignore */ const        kDepthStencilFormatInfo = { ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo };\n/* prettier-ignore */ const kUncompressedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo };\n/* prettier-ignore */ const          kAllTextureFormatInfo = { ...kUncompressedTextureFormatInfo, ...kCompressedTextureFormatInfo };\n\n/* prettier-ignore */ export const      kRegularTextureFormats = keysOf(     kRegularTextureFormatInfo);\n/* prettier-ignore */ export const   kSizedDepthStencilFormats = keysOf(  kSizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUnsizedDepthStencilFormats = keysOf(kUnsizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const   kCompressedTextureFormats = keysOf(  kCompressedTextureFormatInfo);\n\n/* prettier-ignore */ export const        kColorTextureFormats = keysOf(       kColorTextureFormatInfo);\n/* prettier-ignore */ export const    kEncodableTextureFormats = keysOf(   kEncodableTextureFormatInfo);\n/* prettier-ignore */ export const        kSizedTextureFormats = keysOf(       kSizedTextureFormatInfo);\n/* prettier-ignore */ export const        kDepthStencilFormats = keysOf(       kDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUncompressedTextureFormats = keysOf(kUncompressedTextureFormatInfo);\n/* prettier-ignore */ export const          kAllTextureFormats = keysOf(         kAllTextureFormatInfo);\n\n// CompressedTextureFormat are unrenderable so filter from RegularTextureFormats for color targets is enough\nexport const kRenderableColorTextureFormats = kRegularTextureFormats.filter(\n  v => kColorTextureFormatInfo[v].renderable\n);\n\n// The formats of GPUTextureFormat for canvas context.\nexport const kCanvasTextureFormats = ['bgra8unorm', 'rgba8unorm', 'rgba16float'];\n\nexport const kTextureFormatInfo = kAllTextureFormatInfo;","import { kTextureFormatInfo } from './capabilities-info.js';\n\n/**\n * \n * @callback ComputeMemSizeFn\n * @param {any} arg\n * @returns {number} The size in bytes\n */\n\nconst webgpuMemoryIdSymbol = Symbol('webgpu-memory-object-id');\nconst deviceIdToDeviceWeakRef = new Map();\n\n/**\n * @typedef {Object} ObjectInfo\n * @property {WeakRef} ref to object\n * @property {number} id object's id (same as key)\n * @property {number} deviceId object's device\n * @property {string} category\n * @property {number|ComputeMemSizeFn} [size]\n */\n\nlet nextId = 1;\n/** @type {Map<number, ObjectInfo>} */\nconst allWebGPUObjectsById = new Map();\n\n/**\n * Start tracking a resource by device\n * @param {GPUDevice} device\n * @param {GPUObjectBase} webgpuObject\n * @param {string} category\n * @param {number|ComputeMemSizeFn} [size]\n */\nfunction addDeviceObject(device, webgpuObject, category, size) {\n  let id = webgpuObject[webgpuMemoryIdSymbol];\n  if (!id) {\n    id = nextId++;\n    webgpuObject[webgpuMemoryIdSymbol] = id;\n  }\n  allWebGPUObjectsById.set(id, {\n    ref: new WeakRef(webgpuObject),\n    id,\n    deviceId: device[webgpuMemoryIdSymbol],\n    category,\n    size,\n  });\n}\n\n/**\n * Start tracking a resource by device\n * @param {GPUDevice} device\n * @param {GPUTexture | GPUBuffer} webgpuObject\n * @param {string} category\n * @property {number|ComputeMemSizeFn} size\n */\nfunction addDeviceMem(device, webgpuObject, category, size) {\n  addDeviceObject(device, webgpuObject, category, size);\n}\n\n/**\n * @param {number} deviceId\n * @returns true if device still exists\n */\nfunction deviceExists(deviceId) {\n  const ref = deviceIdToDeviceWeakRef.get(deviceId);\n  return ref && !!ref.deref();\n}\n\n/**\n * Free an object's memory\n * @param {number} id\n */\nfunction freeObjectById(id) {\n  allWebGPUObjectsById.delete(id);\n}\n\n/**\n * Free the memory used by object.\n * @param {GPUTexture | GPUBuffer} webgpuObject\n * @param {string} category\n */\nfunction freeObject(webgpuObject, category) {\n  const id = webgpuObject[webgpuMemoryIdSymbol];\n  freeObjectById(id, category);\n}\n\n/**\n * @typedef {Object} WebGPUMemoryInfo\n * @property {Object.<string, number>} memory\n * @property {Object.<string, number>} resources\n */\n\n/**\n * Gets WebGPU memory usage. If no device is passed in returns info for all devices.\n *\n * @param {GPUDevice} [device] optional device.\n * @returns {WebGPUMemoryInfo}\n */\nexport function getWebGPUMemoryUsage(device) {\n  const memory = {\n    total: 0,\n    buffer: 0,\n    texture: 0,\n    canvas: 0,\n  };\n  const resources = {\n    buffer: 0,\n    texture: 0,\n  };\n  const info = { memory, resources };\n\n  const requestedDeviceId = device && device[webgpuMemoryIdSymbol];\n\n  const idsToDelete = [];\n  for (const [id, {ref, deviceId, category, size}] of allWebGPUObjectsById.entries()) {\n    const webgpuObject = ref.deref();\n    if (!webgpuObject || !deviceExists(deviceId)) {\n      idsToDelete.push(id);\n    } else {\n      if (!requestedDeviceId || deviceId === requestedDeviceId) {\n        resources[category] = (resources[category] || 0) + 1;\n        if (size) {\n          const numBytes = typeof size === 'function' ? size(webgpuObject) : size;\n          memory.total += numBytes;\n          memory[category] += numBytes;\n        }\n      }\n    }\n  }\n\n  idsToDelete.forEach(freeObjectById);\n\n  return info;\n}\n\n/**\n *\n * @param {GPUTexture} texture\n * @returns {number} approximate number of bytes used by texture.\n */\nfunction computeTextureMemorySize(texture) {\n  const {\n    blockWidth,\n    blockHeight,\n    bytesPerBlock,\n  } = kTextureFormatInfo[texture.format];\n\n  let size = 0;\n  let width = texture.width;\n  let height = texture.height;\n  let depth = texture.dimension === '3d' ? texture.depthOrArrayLayers : 1;\n  const layers = texture.dimension === '3d' ? 1 : texture.depthOrArrayLayers;\n\n  for (let level = 0; level < texture.mipLevelCount; ++level) {\n    const blocksAcross = Math.ceil(width * texture.sampleCount / blockWidth);\n    const blocksDown = Math.ceil(height * texture.sampleCount / blockHeight);\n    const numBlocks = blocksAcross * blocksDown;\n    const bytesUsed = numBlocks * bytesPerBlock;\n    size += bytesUsed;\n    width = Math.max(1, width / 2 | 0);\n    height = Math.max(1, height / 2 | 0);\n    depth = Math.max(1, depth / 2);\n  }\n\n  size *= layers;\n\n  return size;\n}\n\n/**\n * @param {object} object with method to wrap\n * @param {string} name Name of method to wrap\n * @param {} fn\n */\nfunction wrapFunction(object, name, fn) {\n  const origFn = object.prototype[name];\n  object.prototype[name] = function(...args) {\n    const result = origFn.call(this, ...args);\n    if (result !== undefined && typeof result.then === 'function') {\n      result.then(realResult => fn(this, realResult, ...args));\n    } else {\n      fn(this, result, ...args);\n    }\n    return result;\n  };\n}\n\n/**\n *\n * @param {GPUDevice} device\n * @param {GPUBuffer} buffer\n */\nfunction addBuffer(device, buffer) {\n  const bytesUsed = buffer.size;\n  addDeviceMem(device, buffer, 'buffer', bytesUsed);\n}\n\n/**\n *\n * @param {GPUBuffer} buffer\n */\nfunction removeBuffer(buffer) {\n  freeObject(buffer, 'buffer');\n}\n\n/**\n *\n * @param {GPUDevice} device\n * @param {GPUTexture} texture\n */\nfunction addTexture(device, texture) {\n  const bytesUsed = computeTextureMemorySize(texture);\n  addDeviceMem(device, texture, 'texture', bytesUsed);\n}\n\n/**\n *\n * @param {GPUTexture} texture\n */\nfunction removeTexture(texture) {\n  freeObject(texture, 'texture');\n}\n\nfunction addDevice(adapter, device) {\n  addDeviceMem(device, device, 'device', 0);\n  const id = device[webgpuMemoryIdSymbol];\n  deviceIdToDeviceWeakRef.set(id, new WeakRef(device));\n}\n\nfunction removeDevice(device) {\n  const id = device[webgpuMemoryIdSymbol];\n  deviceIdToDeviceWeakRef.delete(id);\n  freeObject(device, 'device');\n}\n\n// assuming there are, in general, 2 textures per canvas.\n// The one being displayed and the one being rendered to\nconst kTexturesPerCanvas = 2;\n\nfunction computeCanvasBytesUsed(context, format) {\n  const {width, height} = context.canvas;\n  return computeTextureMemorySize({\n    format,\n    width,\n    height,\n    depthOrArrayLayers: 1,\n    sampleCount: 1,\n    mipLevelCount: 1,\n    dimension: '2d',\n  }) * kTexturesPerCanvas;\n}\n\nfunction addContext(context, dummy, config) {\n  freeObject(context, 'canvas');\n  const format = config.format;\n  addDeviceMem(config.device, context, 'canvas', (context) => computeCanvasBytesUsed(context, format))\n}\n\nfunction removeContext(context) {\n  freeObject(context, 'canvas');\n}\n\nfunction wrapCreationDestroy(factoryClass, objectClass, fnName, category) {\n  wrapFunction(factoryClass, fnName, function(device, object) {\n    addDeviceObject(device, object, category);\n  });\n  if (objectClass.prototype.destroy) {\n    wrapFunction(objectClass, 'destroy', function(object) {\n      freeObject(object, category);\n    });\n  }\n}\n/* TODO: remove these! */\n/* global GPUAdapter */\n/* global GPUBuffer */\n/* global GPUDevice */\n/* global GPUTexture */\n/* global GPUSampler */\n/* global GPUBindGroup */\n/* global GPUBindGroupLayout */\n/* global GPUPipelineLayout */\n/* global GPUShaderModule */\n/* global GPUComputePipeline */\n/* global GPURenderPipeline */\n/* global GPUComputePipeline */\n/* global GPURenderPipeline */\n///* global GPUCommandEncoder */\n///* global GPURenderBundleEncoder */\n/* global GPUQuerySet */\n\nif (typeof GPUAdapter !== 'undefined') {\n  wrapFunction(GPUAdapter, 'requestDevice', addDevice);\n  wrapFunction(GPUDevice, 'destroy', removeDevice);\n\n  wrapFunction(GPUCanvasContext, 'configure', addContext);\n  wrapFunction(GPUCanvasContext, 'unconfigure', removeContext);\n\n  wrapFunction(GPUDevice, 'createBuffer', addBuffer);\n  wrapFunction(GPUBuffer, 'destroy', removeBuffer);\n  wrapFunction(GPUDevice, 'createTexture', addTexture);\n  wrapFunction(GPUTexture, 'destroy', removeTexture);\n\n  wrapCreationDestroy(GPUDevice, GPUSampler, 'createSampler', 'sampler');\n  wrapCreationDestroy(GPUDevice, GPUBindGroup, 'createBindGroup', 'bindGroup');\n  wrapCreationDestroy(GPUDevice, GPUBindGroupLayout, 'createBindGroupLayout', 'bindGroupLayout');\n  wrapCreationDestroy(GPUDevice, GPUPipelineLayout, 'createPipelineLayout', 'pipelineLayout');\n  wrapCreationDestroy(GPUDevice, GPUShaderModule, 'createShaderModule', 'shaderModule');\n  wrapCreationDestroy(GPUDevice, GPUComputePipeline, 'createComputePipeline', 'computePipeline');\n  wrapCreationDestroy(GPUDevice, GPURenderPipeline, 'createRenderPipeline', 'renderPipeline');\n  wrapCreationDestroy(GPUDevice, GPUComputePipeline, 'createComputePipelineAsync', 'computePipeline');\n  wrapCreationDestroy(GPUDevice, GPURenderPipeline, 'createRenderPipelineAsync', 'renderPipeline');\n  //wrapCreationDestroy(GPUDevice, GPUCommandEncoder, 'createCommandEncoder', 'commandEncoder');\n  //wrapCreationDestroy(GPUDevice, GPURenderBundleEncoder, 'createRenderBundleEncoder', 'renderBundleEncoder');\n  wrapCreationDestroy(GPUDevice, GPUQuerySet, 'createQuerySet', 'querySet');\n  // problem, no device for this\n  // GPURenderBundleEncoder, 'finish'\n}\n"],"names":["makeTable","members","defaults","table","result","k","v","Object","entries","item","i","length","keysOf","o","keys","kRegularTextureFormatInfo","undefined","r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","rgb10a2unorm","rg11b10ufloat","rgb9e5ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","kTexFmtInfoHeader","kSizedDepthStencilFormatInfo","depth32float","depth16unorm","stencil8","kUnsizedDepthStencilFormatInfo","depth24plus","kCompressedTextureFormatInfo","kColorTextureFormatInfo","kEncodableTextureFormatInfo","kSizedTextureFormatInfo","kDepthStencilFormatInfo","kUncompressedTextureFormatInfo","kAllTextureFormatInfo","kRegularTextureFormats","filter","renderable","kTextureFormatInfo","webgpuMemoryIdSymbol","Symbol","deviceIdToDeviceWeakRef","Map","nextId","allWebGPUObjectsById","addDeviceObject","device","webgpuObject","category","size","id","set","ref","WeakRef","deviceId","addDeviceMem","deviceExists","get","deref","freeObjectById","delete","freeObject","computeTextureMemorySize","texture","blockWidth","blockHeight","bytesPerBlock","format","width","height","dimension","depthOrArrayLayers","layers","level","mipLevelCount","Math","ceil","sampleCount","max","wrapFunction","object","name","fn","origFn","prototype","args","call","this","then","realResult","kTexturesPerCanvas","wrapCreationDestroy","factoryClass","objectClass","fnName","destroy","GPUAdapter","adapter","GPUDevice","GPUCanvasContext","context","dummy","config","canvas","computeCanvasBytesUsed","buffer","GPUBuffer","GPUTexture","GPUSampler","GPUBindGroup","GPUBindGroupLayout","GPUPipelineLayout","GPUShaderModule","GPUComputePipeline","GPURenderPipeline","GPUQuerySet","memory","total","resources","info","requestedDeviceId","idsToDelete","numBytes","push","forEach"],"mappings":"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"}